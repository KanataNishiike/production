Learn Python - Full Course for Beginners [Tutorial]
https://www.youtube.com/watch?v=rfscVS0vtbw


#変数
phrase = "Giraffe Academy"
print(phrase)
=Giraffe Academy

#小文字化
print(phrase.lower())
=giraffe academy

#大文字化
print(phrase.upper())
=GIRAFFE ACADEMY

#審議判定(True or False)
print(phrase.isupper())
=False

#大文字化＆審議判定
print(phrase.upper().isupper())
=True

#文字数
print(len(phrase))
= 15

#文字の抜き取り
print(phrase[0])
= G

#文字検索→文字配列の番号抽出
print(phase.index("G"))
= 0
#文字が複数の場合
print(phase.index("Acad"))
= 8　文字が始まる番号

#変数の変更
print(phrase.replace("Giraffe", "Elephant"))
= Elephant Academy

#数値と変数
num = 7
print(str"num" + " is my favorite number")
= 7 is my favorite number

#絶対値
num = -5
print(abs(num))
= 5

#乗数
print(pow(4, 6))
= 4096

#最大値[()内の最大値]
print(max(4, 6))
= 6
print(max(100, 10))
= 100

#最小値
print(min(10, 100))
= 10

#四捨五入
print(round(3.2))
= 3

#数学の関数を導入
from math import *

#小数点 切り下げ
print(floor(3.7))
= 3

#小数点　切り上げ
print(ceil(3.7))
= 4

#　√(ルート): sqrt
print(sqrt(36))
= 6

#入力機能: input()
name = input ("Enter your name:")
age  = input ("Enter your age:")

print("Hello " + name +" ! You are " + age)
=
Enter your name:
Enter your age:
Hello Keita ! You are 25

#変数と計算
1　文字
num1 = input("Enter a number:")
num2 = input("Enter another number:")
result = num1 + num2
print(result)
=
Enter a number:5
Enter another number:4.8
54.8
#num1とnum2に文字列として入ってるため。

2　数値 int
num1 = input("Enter a number:")
num2 = input("Enter another number:")
result = int(num1) + int(num2)
print(result)
=
Enter a number:5
Enter another number:4
9
#int()で数値化。

2　数値(小数点含む): float
num1 = input("Enter a number:")
num2 = input("Enter another number:")
result = int(num1) + int(num2)
print(result)
=
Enter a number:5
Enter another number:4
9
#int()だとEROORになる(int()は整数のみ)。

#リスト(配列)
friends = ["kevin", "Karen", "Jim"]
print(friends)
=　["kevin", "Karen", "Jim"]

print(friend[0])
=kevin

print(friend[-1])
= Jim
#リスト番号に－が入ると、後ろから数える。

print([1:])
= ["Karen", "Jim"]
#リスト番号１以降を表示。

friends = ['kevin', 'Karen', 'Jim', 'Oscar', 'Toby']
print(friends[1:3])
= ["Karen", "Jim"]
#[1:3] 1以上3未満のリスト

#リストの中身の上書き
friends = ["kevin", "Karen", "Jim"]
friends[1] = "Mike"
print(friends[1])
= Mike

#リストAにリストBを追加: extend()
numbers = [4, 8, 15, 16, 23, 42]
friends = ["kevin", "Karen", "Jim", "Oscar", "Toby"]
friends.extend(numbers)
print(friends)
=['kevin', 'Karen', 'Jim', 'Oscar', 'Toby', 4, 8, 15, 16, 23, 42]
#friendsリストにnumbersリストが追加された。

#リストに追加(末尾): append()
friends = ["kevin", "Karen", "Jim", "Oscar", "Toby"]
friends.append("Creed")
print(friends)
=['kevin', 'Karen', 'Jim', 'Oscar', 'Toby', 'Creed']

#リストに追加(番号):insert()
friends = ["kevin", "Karen", "Jim", "Oscar", "Toby"]
friends.insert(1,"kelly")
print(friends)
=['kevin', 'Kelly','Karen', 'Jim', 'Oscar', 'Toby']

#リストから削除(部分):remove()
friends = ["kevin", "Karen", "Jim", "Oscar", "Toby"]
friends.remove("Jim")
print(friends)
=['kevin', 'Kelly','Karen', 'Oscar', 'Toby']

#リストから削除(全て):clear()
friends = ["kevin", "Karen", "Jim", "Oscar", "Toby"]
friends.clear()
print(friends)
= []

#最後以外を表示: pop()
friends = ["kevin", "Karen", "Jim", "Oscar", "Toby"]
friends.pop()
print(friends)
= ['kevin', 'Karen', 'Jim', 'Oscar']

#リスト内の要素の番号を取得: .index()
friends = ["kevin", "Karen", "Jim", "Oscar", "Toby"]
print(friend.index("Karen"))
= 1

#リスト内の要素の数をカウント: .count()
friends = ["kevin", "Karen", "Jim", "Karen", "Oscar", "Toby"]
print(friends.count("Karen"))
= 2

#リスト内の要素を並び替え: sort()
friends = ["kevin", "Karen", "Jim", "Oscar", "Toby"]
friend.sort()
print(friends)
=['Jim', 'Karen', 'kevin', 'Oscar', 'Toby']

#リスト内の数値を並び替え(小→大): .sort()
numbers = [42, 8, 1, 16, 23,]
numbers.sort()
print(numbers)
=[1, 8, 16, 23, 42]

#リスト内の数値を並び替え(大→小): .sort()
numbers = [42, 8, 1, 16, 23,]
numbers.sort()
print(numbers)
=[1, 8, 16, 23, 42]

#リスト内の数値を並び替え(逆順): .reverse()
numbers = [42, 8, 1, 16, 23]
numbers.reverse()
print(numbers)
=[23, 16, 1, 8, 42]

#リストのコピー: copy()
numbers1 = [42, 8, 1, 16, 23]
numbers2 = numbers1.copy()
print(numbers2)
= [42, 8, 1, 16, 23]

#タプル
code = (4, 5)
print(code[0])
= 4

code = (4, 5)
code[0] = 10
print(code[0])
= error
#タプルはアクセスが早いが、上書きできない。

#関数
def say_hi():
    print("Hello User")

say_hi()
= Hello User

#関数と変数
def say_hi(name, age):
    print("Hello " + name + ", you are " + age)

say_hi("Mike", "35")
say_hi("Steve", "70")

=Hello Mike, you are 35
=Hello Steve, you are 70

#return文
※returnがない場合。
def cube(num):
     num*num*num

print(cube(3))
= None

※returnがある場合。
def cube(num):
    return num*num*num

print(cube(3))
= 27

#if文
male = True

if male:
    print("You are a male")
else:
    print("You are a not a male")

=You are a male


male = True
tall = False
if male and tall:
    print("You are a male")
else:
    print("You are a not a male")

= You are a not a male

※複数選択時の、「and」「or」に注意！
～場合分け～
male =
tall =
if male and tall:
elif male and not(tall):
elif not(male) and tall:
else:


#if文と比較子
def max_num(num1, num2, num3):
    if num1 >= num2 and num1 >= num3:
        return num1
    elif num2 >= num1 and num2 >= num3:
        return num2
    else:
        return num3

print(max_num(3, 40, 5))
= 40

#簡易電卓
num1 = float(input("Enter first number: "))
op   = input("Enter operator: ")
num2 = float(input("Enter second number: "))
if op == '+':
    print(num1 + num2)
elif op == "-":
    print(num1 - num2)
elif op == "*":
    print(num1 * num2)
elif op == "/":
    print(num1 / num2)
else:
    print('Invailed operator')

#辞書
month = {
    "Jan": "January",
    "Feb": "Febrary",
    "Mar": "march",
    "Apr": "April"
}
print(month["Feb"])
= Febrary
print(month.get("Apr"))
= April

print(month["aaa"])
= None
print(month["aaa"],"Not a valid key")
= Not a valid key

month = {
    0: "January",
    1: "Febrary",
    2: "march",
    3: "April"
}
print(month.get(0))
= January

#While loop
1 数の繰り返し
i = 1
while i <= 10:
    print(i)
    i += 1

print("Done with loop")

2　言葉当てゲーム
while guess != secret_word and not(out_of_guess):
    if guess_count < guess_limit:
        guess = input("Enter guess: ")
        guess_count += 1
    else:
        out_of_guess = True
if out_of_guess:
    print("You lose!")
else:
    print("You win!")

#For loop
friends = ["Jim", "Karen", "Kevin"]

for friend in friends:
    print(friend)
=
Jim
Karen
Kevin

for i in range(10):
    print(i)
=
1
2
3
4
5
6
7
8
9

friends = ["Jim", "Karen", "Kevin"]
for i in range(len(friends)):
    print(i)
=
1
2
3

for i in range(5):
    if i == 0:
        print("first Iteration")
    else:
        print("Not first")
=
first Iteration
Not first
Not first
Not first
Not first


def raise_to_power(base_num, pow_num):
    result = 1
    for i in range(pow_num):
        result = result * base_num
    return result

print(raise_to_power(3, 4))
= 81

#二次元リスト& Nested Loops
number_grid = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [0]
]
print(number_grid[0])
= [1, 2, 3]
print(number_grid[2][0])
= 7

for row in number_grid:
    print(row)
=
[1, 2, 3],
[4, 5, 6],
[7, 8, 9],
[0]

for row in number_grid:
    for col in row:
        print(col)
=
1
2
3
4
5
6
7
8
9
0

#翻訳機
def translate(phrase):
    translation = ""
    for letter in phrase:
        if letter in "AEIOUaeiou":           (もしくは、 if letter.lower() in)
            translation = translation + "g"
        else:
            translation = translation + letter
    return translation
print(translate(input("Enter a phrase: ")))
=
Enter a phrase: To be or not to be
Tg bg gr ngt tg bg

改良
def translate(phrase):
    translation = ""
    for letter in phrase:
        if letter.lower() in "aeiou":
            if letter.isupper():
                translation = translation + "G"
            else:
                translation = translation + "g"
        else:
            translation = translation +letter
    return translation
print(translate(input("Enter a phrase: ")))

=Enter a phrase: Omegarism
 Gmgggrgsm

#try&except
try:
    number = int(input("Enter a number: "))
    print(number)
except:
    print("Invailed Input")

=Enter a number: 12
 12
=Enter a number: a
 Invailed Input

#ファイルの読み込み
file =  open("test.txt", "r")

print(file.read())
=ファイル内の全てを読み出し
print(file.readline())
=順に一つずつ
for employee in file.readlines():
  print(employee)

#ファイルの書き込み
file =  open("test.txt", "a")
file.write("\nKelly -customer Service")

#クラスとオブジェクト
クラスファイル
class Student:

    def __init__(self, name, major, gpa, is_on_probation):
        self.name = name
        self.major = major
        self.gpa = gpa
        self.is_on_probation = is_on_probation

真ファイル
from student import Student

student1 = Student("Jim", "Business", 3.1, False)
student2 = Student("Pam", "Art", 2.5, True)
print(student1.gpa)
print(student2.name)
= 3.1
= Pam

#クイズ
・クラス
class Question:
    def __init__(self, prompt, answer):
        self.prompt = prompt
        self.answer = answer

・真ファイル
from Question import Question

      ・問題文(配列)
        question_prompts = [
            "What color are apples?\n(a) Red/Green\n(b) Purple\n(c) Orange\n\n",
            "What color are banana?\n(a) Teal\n(b) Magenta\n(c) Yellow\n\n",
            "What color are berry?\n(a) Yellow\n(b) Red\n(c) Blue\n\n"
        ]

      ・回答(クラスQuestionを使用)
        questions = [
            Question(question_prompts[0], "a"),
            Question(question_prompts[1], "c"),
            Question(question_prompts[2], "b"),
        ]

      ・問題、答え合わせ、ポイントの仕組み。
        def run_test(questions):
            score = 0
            for question in questions:
                answer = input(question.prompt)
                if answer == question.answer:
                    score += 1
                print("You got " + str(score) + "/" + str(len(questions))
                      + "Correct")
        run_test(questions)

#オブジェクト関数
・クラスファイル
class Student:

    ・studentのクラス指定
    def __init__(self, name, major, gpa):
        self.name = name
        self.major = major
        self.gpa = gpa

    ・クラスに働きかける関数
    def on_honor_roll(self):
        if self.gpa >= 3.5:
            return True
        else:
            return False


・真ファイル
from student import Student

student1 = Student("Oscar", "Accounting", 3.1)
student2 = Student("Phyllis", "Business", 3.8)

print(student1.on_honor_roll())
print(student2.on_honor_roll())
= False
= True

#継承
・クラスファイル
class Chef:

    def make_chicken(self):
        print("The chef makes a chicken")

    def make_salad(self):
        print("The chef makes a salad")

    def make_special_dish(self):
        print("The chef makes a dish")


・真ファイル
from Chef import Chef

・Chefクラスの中身をmyChefに継承
myChef = Chef()
myChef.make_special_dish()


・クラスファイル→クラスファイル
from Chef import Chef
class ChineseChef(Chef):    ←ChineseChefクラスの中に、Chefクラスの情報も継承。
　　　　　　　　　　　　　　　　Chefクラスから継承した内容もChineseChefクラス内で上書き可能。
